name: Build Android APK

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发
  pull_request:
    branches:
      - main  # 当对 main 分支的 PR 时触发
  workflow_dispatch:  # 允许手动触发工作流

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
    # 1. 检出代码并确保工作目录干净
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整提交历史，避免浅克隆问题
        clean: true  # 确保清理工作区，避免未提交更改

    # 2. 检查 Git 状态
    - name: Check Git status
      run: |
        git status
        if [ "$(git status --porcelain)" ]; then
          echo "Error: Uncommitted changes detected!"
          exit 1
        fi

    # 3. 设置 JDK 环境
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    # 4. 安装 Android 构建工具
    - name: Install Android tools
      run: sudo apt-get install -y zipalign apksigner

    # 5. 设置签名密钥（从 GitHub Secrets 中获取）
    - name: Set up signing key
      run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > release-key.jks

    # 6. 构建 APK
    - name: Build APK
      run: ./gradlew assembleRelease

    # 7. 签名 APK
    - name: Sign APK
      run: |
        APK_FILE=$(find . -name "*-release-unsigned.apk" | head -n 1)
        if [ -z "$APK_FILE" ]; then
          echo "Error: No unsigned APK found!"
          exit 1
        fi
        echo "Found APK: $APK_FILE"
        zipalign -v -p 4 "$APK_FILE" app-release-aligned.apk
        apksigner sign \
          --ks release-key.jks \
          --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
          --ks-key-alias ${{ secrets.KEY_ALIAS }} \
          --key-pass pass:${{ secrets.KEY_PASSWORD }} \
          --out app-release-signed.apk \
          app-release-aligned.apk

    # 8. 上传签名的 APK 作为构建工件
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: signed-apk
        path: app-release-signed.apk
