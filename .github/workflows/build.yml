name: Build AndroidAPS APK

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发
  workflow_dispatch:  # 支持手动触发

jobs:
  build:
    name: Build and Sign APK
    runs-on: ubuntu-latest

    steps:
    # Step 1: 检出代码
    - name: Checkout Code
      uses: actions/checkout@v3

    # Step 2: 设置 JDK 环境
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    # Step 3: 安装 Android SDK
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 33
        build-tools: 33.0.2
        ndk: 23.1.7779620

    # Step 4: 给予 gradlew 执行权限
    - name: Grant Execute Permission
      run: chmod +x ./gradlew

    # Step 5: 构建 APK
    - name: Build APK
      run: ./gradlew assembleRelease

    # Step 6: 调试生成的 APK 路径
    - name: Debug APK Path
      run: |
        echo "Listing APK files:"
        find . -name "*.apk"

    # Step 7: 签名 APK
    - name: Sign APK
      run: |
        # 查找未签名的 APK 文件
        APK_FILE=$(find . -name "*-release-unsigned.apk" | head -n 1)
        if [ -z "$APK_FILE" ]; then
          echo "Error: No unsigned APK found!"
          exit 1
        fi
        echo "Found APK: $APK_FILE"
        # 对 APK 文件进行对齐处理
        zipalign -v -p 4 "$APK_FILE" app-release-aligned.apk
        # 对 APK 文件进行签名
        apksigner sign --ks release-key.jks --ks-pass pass:789789Fty --ks-key-alias my-key-alias --key-pass pass:789789Fty --out app-release-signed.apk app-release-aligned.apk
      env:
        APK_RELEASE_KEY_BASE64: ${{ secrets.APK_RELEASE_KEY_BASE64 }}
        APK_RELEASE_KEY_PASSWORD: ${{ secrets.APK_RELEASE_KEY_PASSWORD }}

    # Step 8: 上传签名后的 APK
    - name: Upload Signed APK
      uses: actions/upload-artifact@v3
      with:
        name: Signed-APK
        path: app-release-signed.apk
